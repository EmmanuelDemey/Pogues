From 1921f06af231bfe45161f99b62a9edf510161073 Mon Sep 17 00:00:00 2001
From: Emmanuel Demey <demey.emmanuel@gmail.com>
Date: Thu, 26 Sep 2019 15:40:02 +0200
Subject: [PATCH] fix: some trello cards

---
 build-config/fake-backend/units.js            | 28 ++++----
 src/constants/pogues-constants.js             |  3 +
 .../components/questionnaire-list.jsx         |  6 ++
 .../transformations/response-format-simple.js | 23 ++++++-
 .../response-format-simple.spec.js            | 68 ++++++++++++++++++-
 .../codes-lists/components/codes-lists.jsx    | 15 +---
 .../single/response-format-single.jsx         | 42 ------------
 7 files changed, 111 insertions(+), 74 deletions(-)

diff --git a/build-config/fake-backend/units.js b/build-config/fake-backend/units.js
index 39784a13..c8dfafd4 100644
--- a/build-config/fake-backend/units.js
+++ b/build-config/fake-backend/units.js
@@ -1,30 +1,30 @@
 module.exports = [
   {
-    uri: 'unit01',
-    label: 'Unit 01',
+    uri: 'http://id.insee.fr/unit/heure',
+    label: 'heure',
   },
   {
-    uri: 'unit02',
-    label: 'Unit 02',
+    uri: 'http://id.insee.fr/unit/jour',
+    label: 'jour',
   },
   {
-    uri: 'unit03',
-    label: 'Unit 03',
+    uri: 'http://id.insee.fr/unit/mois',
+    label: 'mois',
   },
   {
-    uri: 'unit04',
-    label: 'Unit 04',
+    uri: 'http://id.insee.fr/unit/annee',
+    label: 'annees',
   },
   {
-    uri: 'unit05',
-    label: 'Unit 05',
+    uri: 'http://id.insee.fr/unit/euro',
+    label: '€',
   },
   {
-    uri: 'unit06',
-    label: 'Unit 06',
+    uri: 'http://id.insee.fr/unit/keuro',
+    label: 'k€',
   },
   {
-    uri: 'unit07',
-    label: 'Unit 07',
+    uri: 'http://id.insee.fr/unit/percent',
+    label: '%',
   },
 ];
diff --git a/src/constants/pogues-constants.js b/src/constants/pogues-constants.js
index 23383e98..3924280d 100755
--- a/src/constants/pogues-constants.js
+++ b/src/constants/pogues-constants.js
@@ -19,8 +19,11 @@ export const DATATYPE_NAME = {
   NUMERIC: 'NUMERIC',
   TEXT: 'TEXT',
   BOOLEAN: 'BOOLEAN',
+  DURATION: 'DURATION',
 };
 
+export const DURATION_UNIT = ['heure', 'mois', 'jour'];
+
 // mapping to convert a type to a type when we serialize a
 // questionnaire
 export const DATATYPE_TYPE_FROM_NAME = {
diff --git a/src/layout/questionnaire-list/components/questionnaire-list.jsx b/src/layout/questionnaire-list/components/questionnaire-list.jsx
index c4d17d49..edbb8aad 100644
--- a/src/layout/questionnaire-list/components/questionnaire-list.jsx
+++ b/src/layout/questionnaire-list/components/questionnaire-list.jsx
@@ -48,6 +48,12 @@ class QuestionnaireList extends Component {
     }
   }
 
+  updateFilter(value) {
+    this.setState({
+      filter: value,
+    });
+  }
+
   render() {
     const { questionnaires, user } = this.props;
 
diff --git a/src/model/transformations/response-format-simple.js b/src/model/transformations/response-format-simple.js
index 090e52f1..56cff01e 100644
--- a/src/model/transformations/response-format-simple.js
+++ b/src/model/transformations/response-format-simple.js
@@ -1,11 +1,13 @@
 import * as Response from './response';
+import { DATATYPE_NAME, DURATION_UNIT } from 'constants/pogues-constants';
 
 export function remoteToState(remote) {
+  console.log(remote);
   const {
     responses: [
       {
         Datatype: {
-          typeName,
+          typeName: remoteTypeName,
           MaxLength: maxLength,
           Pattern: pattern,
           Minimum: minimum,
@@ -19,6 +21,10 @@ export function remoteToState(remote) {
     ],
   } = remote;
 
+  const typeName =
+    remoteTypeName === DATATYPE_NAME.DURATION
+      ? DATATYPE_NAME.NUMERIC
+      : remoteTypeName;
   const datatype = {};
 
   if (maxLength !== undefined) datatype.maxLength = maxLength;
@@ -35,10 +41,21 @@ export function remoteToState(remote) {
     [typeName]: datatype,
   };
 }
-
 export function stateToRemote(state, collectedVariables) {
-  const { type: typeName, mandatory, id } = state;
+  const { mandatory, id } = state;
+  let { type: typeName } = state;
   const dataType = state[typeName];
+
+  const suffix =
+    dataType.unit &&
+    dataType.unit.substr(
+      dataType.unit.lastIndexOf('/') + 1,
+      dataType.unit.length,
+    );
+
+  if (DURATION_UNIT.includes(suffix)) {
+    typeName = DATATYPE_NAME.DURATION;
+  }
   return {
     Response: [
       Response.stateToRemote({
diff --git a/src/model/transformations/response-format-simple.spec.js b/src/model/transformations/response-format-simple.spec.js
index a61c75bf..a02d9bbe 100644
--- a/src/model/transformations/response-format-simple.spec.js
+++ b/src/model/transformations/response-format-simple.spec.js
@@ -1,5 +1,6 @@
 import { remoteToState, stateToRemote } from './response-format-simple';
 import * as Response from './response';
+import { DATATYPE_NAME } from 'constants/pogues-constants';
 
 describe('redirection transformation', () => {
   describe('remoteToState', () => {
@@ -56,11 +57,49 @@ describe('redirection transformation', () => {
         typeName: {},
       });
     });
+
+    it('should return an NUMBER datatype if it is a duration', () => {
+      expect(
+        remoteToState({
+          responses: [
+            {
+              CollectedVariableReference: 'k10ot762',
+              Datatype: {
+                Decimals: '3',
+                Maximum: '2',
+                Minimum: '1',
+                Unit: 'http://id.insee.fr/unit/mois',
+                typeName: 'DURATION',
+              },
+              id: '1',
+              mandatory: false,
+            },
+          ],
+        }),
+      ).toEqual({
+        NUMERIC: {
+          minimum: '1',
+          maximum: '2',
+          decimals: '3',
+          unit: 'http://id.insee.fr/unit/mois',
+        },
+        mandatory: false,
+        id: '1',
+        type: 'NUMERIC',
+      });
+    });
   });
   describe('stateToRemote', () => {
-    it('should return the remote representation of an redirection   ', () => {
+    beforeEach(() => {
       Response.stateToRemote = jest.fn();
       Response.stateToRemote.mockReturnValueOnce({ id: '2' });
+    });
+
+    afterEach(() => {
+      Response.stateToRemote.mockClear();
+    });
+
+    it('should return the remote representation of an redirection   ', () => {
       const result = stateToRemote(
         {
           id: '2',
@@ -78,7 +117,32 @@ describe('redirection transformation', () => {
         typeName: 'typeName',
         collectedVariable: { id: '1' },
       });
-      Response.stateToRemote.mockClear();
+    });
+
+    it('should return a Datatype.DURATION if the unit is month', () => {
+      const state = {
+        NUMERIC: {
+          minimum: '1',
+          maximum: '2',
+          decimals: '3',
+          unit: 'http://id.insee.fr/unit/mois',
+        },
+        mandatory: false,
+        id: '1',
+        type: 'NUMERIC',
+      };
+      stateToRemote(state, [{ id: '1' }]);
+
+      expect(Response.stateToRemote).toHaveBeenCalledWith({
+        minimum: '1',
+        maximum: '2',
+        decimals: '3',
+        unit: 'http://id.insee.fr/unit/mois',
+        id: '1',
+        mandatory: false,
+        typeName: DATATYPE_NAME.DURATION,
+        collectedVariable: { id: '1' },
+      });
     });
   });
 });
diff --git a/src/widgets/codes-lists/components/codes-lists.jsx b/src/widgets/codes-lists/components/codes-lists.jsx
index bd0b7c5a..42f0124c 100644
--- a/src/widgets/codes-lists/components/codes-lists.jsx
+++ b/src/widgets/codes-lists/components/codes-lists.jsx
@@ -67,27 +67,16 @@ class CodesList extends Component {
   static defaultProps = defaultProps;
 
   UNSAFE_componentWillMount() {
-    const {
-      change,
-      formName,
-      path,
-      currentId,
-      clearSearchResult,
-      codesListsStore,
-    } = this.props;
-    let activePanel = NEW;
+    const { change, formName, path, clearSearchResult } = this.props;
 
     clearSearchResult();
 
-    if (codesListsStore[currentId]) activePanel = QUEST;
-
-    change(formName, `${path}panel`, activePanel);
+    change(formName, `${path}panel`, NEW);
   }
 
   componentWillReceiveProps(nextProps) {
     const {
       change,
-      arrayPush,
       arrayRemoveAll,
       formName,
       path,
diff --git a/src/widgets/component-new-edit/components/response-format/single/response-format-single.jsx b/src/widgets/component-new-edit/components/response-format/single/response-format-single.jsx
index 8c207786..829116ca 100644
--- a/src/widgets/component-new-edit/components/response-format/single/response-format-single.jsx
+++ b/src/widgets/component-new-edit/components/response-format/single/response-format-single.jsx
@@ -58,48 +58,6 @@ class ResponseFormatSingle extends Component {
             />
           </div>
         </div>
-        {/*
-
-          <OptionalView
-          name="hasSpecialCode"
-          label={Dictionary.addSpecialCode}
-          selectorPath={this.selectorPathComposed}
-          checkbox
-          >
-          <div>
-            <Field
-              name="specialLabel"
-              type="text"
-              component={Input}
-              label={Dictionary.codeLabel}
-            />
-            <Field
-              name="specialCode"
-              type="text"
-              component={Input}
-              label={Dictionary.code}
-            />
-            <Field
-              name="specialUiBehaviour"
-              component={Select}
-              label={Dictionary.uiBehaviour}
-            >
-              {Object.keys(UI_BEHAVIOUR).map(key => (
-                <GenericOption key={key} value={key}>
-                  {Dictionary[key]}
-                </GenericOption>
-              ))}
-            </Field>
-            <Field
-              name="specialFollowUpMessage"
-              type="text"
-              component={Input}
-              label={Dictionary.followUpMsg}
-            />
-          </div>
-          </OptionalView>
-
-          */}
 
         <Field
           name="visHint"
-- 
2.23.0


From 11e0d645ac08a3c92b565cc6dd4ba6f86a5f41d7 Mon Sep 17 00:00:00 2001
From: Emmanuel Demey <demey.emmanuel@gmail.com>
Date: Wed, 16 Oct 2019 14:06:38 +0200
Subject: [PATCH] fix: rewrite transformation

---
 .../transformations/response-format-simple.js | 110 +++++++-------
 .../response-format-simple.spec.js            | 135 +++++++++++++++++-
 2 files changed, 182 insertions(+), 63 deletions(-)

diff --git a/src/model/transformations/response-format-simple.js b/src/model/transformations/response-format-simple.js
index 499c77a4..51e37454 100644
--- a/src/model/transformations/response-format-simple.js
+++ b/src/model/transformations/response-format-simple.js
@@ -21,7 +21,8 @@ export function remoteToState(remote) {
     ],
   } = remote;
 
- const format = typeName==='DATE' && format1 ? format1.toLowerCase() : format1 ;
+  const format =
+    typeName === 'DATE' && format1 ? format1.toLowerCase() : format1;
 
   const datatype = {};
   if (maxLength !== undefined) datatype.maxLength = maxLength;
@@ -32,36 +33,34 @@ export function remoteToState(remote) {
   if (unit !== undefined) datatype.unit = unit;
   if (format !== undefined) datatype.format = format;
 
-  if (datatype.minimum !== undefined && typeName==='DURATION' ) {
+  if (datatype.minimum !== undefined && typeName === 'DURATION') {
     let strminimum = datatype.minimum;
     let strmaximum = datatype.maximum;
     let matches_minimum = strminimum.match(/\d+/g);
     let matches_maximum = strmaximum.match(/\d+/g);
-    if (format !== undefined && format === "PTnHnM" ) {
+    if (format !== undefined && format === 'PTnHnM') {
       datatype.mihours = matches_minimum[0];
-      datatype.miminutes =  matches_minimum[1];
+      datatype.miminutes = matches_minimum[1];
       datatype.mahours = matches_maximum[0];
       datatype.maminutes = matches_maximum[1];
-     }
-    if (format !== undefined && format === "PnYnM" ) {
+    }
+    if (format !== undefined && format === 'PnYnM') {
       datatype.miyears = matches_minimum[0];
       datatype.mimonths = matches_minimum[1];
       datatype.mayears = matches_maximum[0];
       datatype.mamonths = matches_maximum[1];
-    } 
-
-    datatype.miyears = datatype.miyears === 0 ? '': datatype.miyears;
-    datatype.mimonths = datatype.mimonths === 0 ? '': datatype.mimonths;
-    datatype.mayears = datatype.mayears === 0 ? '': datatype.mayears;
-    datatype.mamonths = datatype.mamonths === 0 ? '': datatype.mamonths;
-    datatype.mihours = datatype.mihours === 0 ? '': datatype.mihours;
-    datatype.miminutes = datatype.miminutes === 0 ? '': datatype.miminutes;
-    datatype.mahours = datatype.mahours === 0 ? '': datatype.mahours;
-    datatype.maminutes = datatype.miyears === 0 ? '': datatype.maminutes;
+    }
 
+    datatype.miyears = datatype.miyears === 0 ? '' : datatype.miyears;
+    datatype.mimonths = datatype.mimonths === 0 ? '' : datatype.mimonths;
+    datatype.mayears = datatype.mayears === 0 ? '' : datatype.mayears;
+    datatype.mamonths = datatype.mamonths === 0 ? '' : datatype.mamonths;
+    datatype.mihours = datatype.mihours === 0 ? '' : datatype.mihours;
+    datatype.miminutes = datatype.miminutes === 0 ? '' : datatype.miminutes;
+    datatype.mahours = datatype.mahours === 0 ? '' : datatype.mahours;
+    datatype.maminutes = datatype.miyears === 0 ? '' : datatype.maminutes;
   }
 
-
   return {
     id,
     type: typeName,
@@ -72,58 +71,54 @@ export function remoteToState(remote) {
 export function stateToRemote(state, collectedVariables) {
   const { mandatory, id } = state;
   let { type: typeName } = state;
-  let dataType = state[typeName];
-  
-  if (dataType.format !== undefined && typeName === 'DATE' ) {
+  const dataType = state[typeName];
 
-    dataType.format = dataType.format.toUpperCase();
-    if(dataType.minimum ===  ''){
-      delete dataType.minimum;
-    }
+  let customDataType = dataType;
 
-    if(dataType.maximum ===  ''){
-      delete dataType.maximum;
-    }
-  }
-    
-  if (typeName === 'DURATION' && dataType.format === 'PnYnM' ){
+  if (customDataType.format !== undefined && typeName === DATATYPE_NAME.DATE) {
+    const { format, minimum, maximum, ...dateDataType } = dataType;
 
-    dataType.miyears = dataType.miyears === '' ? 0 : dataType.miyears;
-    dataType.mimonths = dataType.mimonths === '' ? 0 : dataType.mimonths;
-    dataType.mayears = dataType.mayears === '' ? 0 : dataType.mayears;
-    dataType.mamonths = dataType.mamonths === '' ? 0 : dataType.mamonths;
- 
-    dataType.minimum = `P${dataType.miyears}Y${dataType.mimonths}M`;
-    dataType.maximum = `P${dataType.mayears}Y${dataType.mamonths}M`;
+    dateDataType.format = format.toUpperCase();
+    if (customDataType.minimum !== '') {
+      dateDataType.minimum = minimum;
+    }
 
-  } 
+    if (customDataType.maximum !== '') {
+      dateDataType.maximum = maximum;
+    }
 
-  if (typeName === 'DURATION' && dataType.format === 'PTnHnM' ){
+    customDataType = dateDataType;
+  }
 
-    dataType.mihours = dataType.mihours === '' ? 0 : dataType.mihours;
-    dataType.miminutes = dataType.miminutes === '' ? 0 : dataType.miminutes;
-    dataType.mahours = dataType.mahours === '' ? 0 : dataType.mahours;
-    dataType.maminutes = dataType.maminutes === '' ? 0 : dataType.maminutes;
+  if (typeName === DATATYPE_NAME.DURATION) {
+    const {
+      miyears,
+      mimonths,
+      mayears,
+      mamonths,
+      mihours,
+      miminutes,
+      mahours,
+      maminutes,
+      ...durationDataType
+    } = customDataType;
+
+    if (dataType.format === 'PnYnM') {
+      durationDataType.minimum = `P${miyears || 0}Y${mimonths || 0}M`;
+      durationDataType.maximum = `P${mayears || 0}Y${mamonths || 0}M`;
+    }
+    if (dataType.format === 'PTnHnM') {
+      durationDataType.minimum = `PT${mihours || 0}H${miminutes || 0}M`;
+      durationDataType.maximum = `PT${mahours || 0}H${maminutes || 0}M`;
+    }
 
-    dataType.minimum = `PT${dataType.mihours}H${dataType.miminutes}M`;
-    dataType.maximum = `PT${dataType.mahours}H${dataType.maminutes}M`;
-  } 
-  
-  if(typeName === 'DURATION'){
-    delete dataType.miyears;
-    delete dataType.mimonths;
-    delete dataType.mihours;
-    delete dataType.miminutes;
-    delete dataType.mayears;
-    delete dataType.mamonths;
-    delete dataType.mahours;
-    delete dataType.maminutes;
+    customDataType = durationDataType;
   }
 
   return {
     Response: [
       Response.stateToRemote({
-        ...dataType,
+        ...customDataType,
         id,
         typeName,
         mandatory,
@@ -131,5 +126,4 @@ export function stateToRemote(state, collectedVariables) {
       }),
     ],
   };
-
 }
diff --git a/src/model/transformations/response-format-simple.spec.js b/src/model/transformations/response-format-simple.spec.js
index 6de54130..38e4d18b 100644
--- a/src/model/transformations/response-format-simple.spec.js
+++ b/src/model/transformations/response-format-simple.spec.js
@@ -59,8 +59,6 @@ describe('redirection transformation', () => {
         typeName: {},
       });
     });
-
-
   });
   describe('stateToRemote', () => {
     beforeEach(() => {
@@ -72,24 +70,151 @@ describe('redirection transformation', () => {
       Response.stateToRemote.mockClear();
     });
 
-    it('should return the remote representation of an redirection   ', () => {
+    it('should return the remote representation of a simple response   ', () => {
       const result = stateToRemote(
         {
           id: '2',
           mandatory: true,
           type: 'typeName',
-          typeName: { typeObject: true },
+          typeName: { minimum: 1, maximum: 2 },
         },
         [{ id: '1' }],
       );
       expect(result).toEqual({ Response: [{ id: '2' }] });
       expect(Response.stateToRemote).toHaveBeenCalledWith({
-        typeObject: true,
+        minimum: 1,
+        maximum: 2,
         id: '2',
         mandatory: true,
         typeName: 'typeName',
         collectedVariable: { id: '1' },
       });
     });
+
+    describe('DURATION format', () => {
+      it('should return the remote representation for the PnYnM format', () => {
+        const result = stateToRemote(
+          {
+            id: '2',
+            mandatory: true,
+            type: DATATYPE_NAME.DURATION,
+
+            [DATATYPE_NAME.DURATION]: {
+              miyears: 1,
+              mimonths: '',
+              mayears: 3,
+              mamonths: 4,
+              format: 'PnYnM',
+            },
+          },
+          [{ id: '1' }],
+        );
+        expect(result).toEqual({ Response: [{ id: '2' }] });
+        expect(Response.stateToRemote).toHaveBeenCalledWith({
+          maximum: 'P3Y4M',
+          minimum: 'P1Y0M',
+          format: 'PnYnM',
+          id: '2',
+          mandatory: true,
+          typeName: DATATYPE_NAME.DURATION,
+          collectedVariable: { id: '1' },
+        });
+      });
+      it('should return the remote representation for the PTnHnM format', () => {
+        const result = stateToRemote(
+          {
+            id: '2',
+            mandatory: true,
+            type: DATATYPE_NAME.DURATION,
+
+            [DATATYPE_NAME.DURATION]: {
+              mihours: '',
+              miminutes: 2,
+              mahours: 3,
+              maminutes: 4,
+              format: 'PTnHnM',
+            },
+          },
+          [{ id: '1' }],
+        );
+        expect(result).toEqual({ Response: [{ id: '2' }] });
+        expect(Response.stateToRemote).toHaveBeenCalledWith({
+          maximum: 'PT3H4M',
+          minimum: 'PT0H2M',
+          format: 'PTnHnM',
+          id: '2',
+          mandatory: true,
+          typeName: DATATYPE_NAME.DURATION,
+          collectedVariable: { id: '1' },
+        });
+      });
+    });
+
+    describe('DATE format', () => {
+      it('should keep the maximum and minimum property if the typeName is a DATE and if the format is empty', () => {
+        const result = stateToRemote(
+          {
+            id: '2',
+            mandatory: true,
+            type: DATATYPE_NAME.DATE,
+
+            [DATATYPE_NAME.DATE]: { minimum: '', maximum: '' },
+          },
+          [{ id: '1' }],
+        );
+        expect(result).toEqual({ Response: [{ id: '2' }] });
+        expect(Response.stateToRemote).toHaveBeenCalledWith({
+          minimum: '',
+          maximum: '',
+          id: '2',
+          mandatory: true,
+          typeName: DATATYPE_NAME.DATE,
+          collectedVariable: { id: '1' },
+        });
+      });
+
+      it('should remove the minimum and maximum if the typeName is a DATE and if they are empty', () => {
+        const result = stateToRemote(
+          {
+            id: '2',
+            mandatory: true,
+            type: DATATYPE_NAME.DATE,
+
+            [DATATYPE_NAME.DATE]: { minimum: '', maximum: '', format: 'PnYnM' },
+          },
+          [{ id: '1' }],
+        );
+        expect(result).toEqual({ Response: [{ id: '2' }] });
+        expect(Response.stateToRemote).toHaveBeenCalledWith({
+          format: 'PNYNM',
+          id: '2',
+          mandatory: true,
+          typeName: DATATYPE_NAME.DATE,
+          collectedVariable: { id: '1' },
+        });
+      });
+
+      it('should not remove the minimum and maximum if the typeName is a DATE and if the format is not empty', () => {
+        const result = stateToRemote(
+          {
+            id: '2',
+            mandatory: true,
+            type: DATATYPE_NAME.DATE,
+            [DATATYPE_NAME.DATE]: { minimum: 1, maximum: 2, format: 'PnYnM' },
+          },
+          [{ id: '1' }],
+        );
+        expect(result).toEqual({ Response: [{ id: '2' }] });
+        expect(Response.stateToRemote).toHaveBeenCalledWith({
+          minimum: 1,
+          maximum: 2,
+          format: 'PNYNM',
+          id: '2',
+          mandatory: true,
+          typeName: DATATYPE_NAME.DATE,
+          collectedVariable: { id: '1' },
+        });
+      });
+    });
   });
 });
-- 
2.23.0

